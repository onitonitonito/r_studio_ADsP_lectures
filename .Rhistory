hist(y1)
plot(y1, x1)
m1 = lm(formula=y1~x1, data=iris)
abline(m1, lty="dotted")
summary(m1)
rm(list=ls())
setwd("~/Github/r_studio_ADsP_lectures/book")
getwd()
setwd("~/Github/r_studio_ADsP_lectures")
getwd()
###-----------------------------------------------------------------------------
### 1.descriptive statistics
###-----------------------------------------------------------------------------
data(iris)
length(iris$Species)
colnames(iris)
head(iris)
summary(iris)
plot(iris)
ggplot(data=iris, aes(x=iris$Sepal.Width,y=iris$Sepal.Length)) + geom_point()
ggplot(data=iris, aes(x=iris$Petal.Width,y=iris$Petal.Length)) + geom_point()
se_L <- iris$Sepal.Length
mean(se_L)
median(se_L)
sd(se_L)
var(se_L)
hist(se_L)
quantile(se_L)
quantile(se_L, 3/4)
max(se_L)
min(se_L)
y <- iris[iris$Species == 'setosa',]$Petal.Length
x <- iris[iris$Species == 'setosa',]$Petal.Width
y1 <- iris$Petal.Length
x1 <- iris$Petal.Width
hist(x)
hist(y)
plot(y, x)
hist(x1)
hist(y1)
plot(y1, x1)
m1 = lm(formula=y1~x1, data=iris)
abline(m1, lty="dotted")
summary(m1)
rm(list=ls())
getwd()
#############################################
#
#   계량적  MDS(다차원척도법)
#
#############################################
library(MASS)
" __ (1) 도시간의 거리를 알면, 도시 전체의 배치를 알수 있음 __"
data("eurodist")
eurodist
head(eurodist)
summary(eurodist)
loc<-cmdscale(eurodist)
x<-loc[,1]
y<- -loc[,2]
# 플롯 옵션
# 각 도시간의 거리를 알면, 실제 도시의 위치와 비슷하게 배치가 된다.
plot(x, y, type="n", asp=1, main="Metric MDS")
text(x,y,rownames(loc),cex=0.9)
abline(v=0, h=0, lty=2, lwd=0.5)
"__ (2) 서로 성격이 비슷한 차량끼리, 2차원 공간에 배치시켜 줌 ___"
data(mtcars)
head(mtcars)
mt <- mtcars
mt.x <- as.matrix(mt[,-1])
mt.dist <- dist(mt.x)
loc <- cmdscale(mt.dist)
# 그림상에 보이지 않지만, 점을 찍어주고
plot(loc[,1],loc[,2],type="n",asp=1,main="Metric MDS")
# 타이틀을 표시해 준다
text(loc[,1],loc[,2],rownames(loc),cex=0.7)
# 중앙값의 라인을 그려준다.
abline(v=0, h=0, lty=2, lwd=0.5)
#############################################
#
#   주성분분석 (PCA: Principal Component Analysis)
#
#############################################
library(datasets)
data(USArrests)
pairs(USArrests, panel=panel.smooth,
main="USArrests data")
US.prin <- princomp(USArrests,cor=TRUE)
summary(US.prin)
screeplot(US.prin,npcs=5, type="lines")
loadings(US.prin)
"
Loadings:
Comp.1  Comp.2    Comp.3 Comp.4
Murder   -0.536*  0.418    -0.341  0.649
Assault  -0.583*  0.188    -0.268 -0.743
UrbanPop -0.278  -0.873*   -0.378  0.134
Rape     -0.543* -0.167     0.818
__컴포넌트 팩터가 큰값 비교: PC1=M,A,R / PC2=U
"
US.prin$scores
biplot(US.prin)
"직선방향= 성향강함 / 반대쪽=성향약함 / 법선=영향없음"
#############################################
#
#   ???????? PCA ??�� 2
#
#############################################
# csv ???? ?ҷ??��? (file importing)
f_2007 <- read.csv("./_static\\finance_2007.csv",
header = TRUE, stringsAsFactors = FALSE)
head(f_2007)
# 6개 증권사현황 = 교보,메리츠,대신,대우,동부,SK
# V1 : 총자본순이익율
# V2 : 자기자본순이익율
# V3 : 자기자본비율
# V4 : 부채비율
# V5 : 자기자본회전율
# 표준화 변환 (standardization)
f_2007 <- transform(f_2007,
V1_s = scale(V1),
V2_s = scale(V2),
V3_s = scale(V3),
V4_s = scale(V4),
V5_s = scale(V5))
# variable selection
f_2007_2 <-f_2007[,c("company", "V1_s", "V2_s", "V3_s", "V4_s", "V5_s")]
head(f_2007_2)
# 상관관계(Correlation)분석
cor(f_2007_2[,-1])
round(cor(f_2007_2[,-1]), digits=3) # ?ݿø?
# Scatter plot matrix
# 스캐터 챠드 확인
plot(f_2007_2[,-1])
# 주성분분석 PCA(Principal Component Analysis)
secu_prcomp <- prcomp(f_2007_2[,c(2:6)]) # 첫번째 회사명은 제외(2~6컬럼)
summary(secu_prcomp)
print(secu_prcomp)
# Scree Plot
plot(secu_prcomp, type="l",
sub = "Scree Plot")
# Biplot
biplot(secu_prcomp, cex = c(0.7, 0.8))
# 관측치별 주성분1, 주성분2 점수 계산(PC1 score, PC2 score)
secu_pc1 <- predict(secu_prcomp)[,1]
secu_pc2 <- predict(secu_prcomp)[,2]
# 그래프상에 관측치별 이름 매핑(rownames mapping)
text(secu_pc1, secu_pc2, labels = f_2007_2$company,
cex = 0.7, pos = 3, col = "blue")
###########################################################
## PCA (Principal Component Analysis)
## User Defined Function
##  - finding PC k which Cummulative Proportion is over 0.8
###########################################################
pca <- function(dataset)  {
pc = prcomp(dataset, scale = TRUE)
k = 0
R = 0
while(R < 0.8) {
k = k + 1
R = sum(pc[[1]][1:k]^2)/sum(pc[[1]]^2)
cat("When number of Principal Component(k) is ", k,
", Cummulative Proportion(R) is ", R, "\n", "\n", sep="")
}
SelectedDataSet = pc[[5]][,1:k]
return(SelectedDataSet)
}
# pca 펑션을 정의해서, 각 데이터별 XY의 거리 데이터를 보여줌.
pca(f_2007_2[,c(2:6)])
## PCA for College data
data(College)
cdat = College[,2:18]
dim(cdat)
names(cdat)
## PCA
pc.col <- princomp(cdat) #default - centers and scales
#default R plots with princomp
biplot(pc.col, cex=.7)
screeplot(pc.col)
# #scatter plots - patterns among observations
i = 1; j = 2;
plot(pc.col$scores[,i],pc.col$scores[,j],pch=16,cex=.2)
text(pc.col$scores[,i],pc.col$scores[,j],rownames(cdat),cex=.6)
#look at a particular college
ind = match("Harvard University",rownames(cdat))
text(pc.col$scores[ind,i],pc.col$scores[ind,j],rownames(cdat)[ind],cex=.7,col=2)
#loadings - variables that contribute to these patterns
par(mfrow=c(2,1))
barplot(pc.col$loadings[,1],cex.names=.6,main="PC 1 Loadings")
barplot(pc.col$loadings[,2],cex.names=.6,main="PC 2 Loadings")
#variance explained
screeplot(pc.col)
varex <- 100*pc.col$sdev^2/sum(pc.col$sdev^2)
plot(varex,type="l",ylab="% Variance Explained",xlab="Component")
#cumulative variance explained
cvarex = NULL
for(i in 1:ncol(cdat)){
cvarex[i] = sum(varex[1:i])
}
plot(cvarex,type="l",ylab="Cumulative Variance Explained",xlab="Component")
library(College)
install.packages(College)
init <- function()
{
rm(list=ls())
setwd("~/Github/r_studio_ADsP_lectures")
getwd()
}
###-----------------------------------------------------------------------------
### 1.descriptive statistics
###-----------------------------------------------------------------------------
init()
?iris
data(iris)
head(iris)
summary(iris)
Se_L <- iris$Sepal.Length
mean(Se_L)
median(Se_L)
sd(Se_L)
var(Se_L)
quantile(Se_L)
quantile(Se_L, 3/4)
max(Se_L)
min(Se_L)
install.packages("MASS")
library(MASS)
data(Animals, package="MASS")
Animals
summary(Cars93)
An_B <- Animals$body
mean(An_B)
median(An_B)
sd(An_B)
var(An_B)
quantile(An_B, 1/4)
quantile(An_B, 3/4)
max(An_B)
min(An_B)
quantile(An_B)
An_b <- Animals$brain
mean(An_b)
median(An_b)
sd(An_b)
var(An_b)
quantile(An_b, 1/4)
quantile(An_b, 3/4)
max(An_b)
min(An_b)
quantile(An_b)
###-----------------------------------------------------------------------------
### 3. correlation analysis
###-----------------------------------------------------------------------------
init()
1+1
14-10
4*6
28/7
38%%7
oddcount <- function(x) {
k <- 0
for(n in x) {
if(n%%2==1) k <- k + 1
}
return(k)
}
oddcount(c(1,3,4))
oddcount(c(1,2,3,4,5,6,7))
data(mtcars)
plot(mtcars)
colnames(mtcars)
head(mtcars)
summary(mtcars)
a <- mtcars$mpg
b <- mtcars$hp
c<-mtcars$wt
plot(a, b)
plot(a, c)
cov(a,c)
cor(a,c)
cor(mtcars)
cov(mtcars)
install.packages("Hmisc")
install.packages("MASS")
x <- c(110,120,130,140,150)
y <- c(100,105,128,115,142)
plot(y~x)
plot(y~x, pch=20, col="red")
line = lm(y~x)
line
"""
Call:
lm(formula = y ~ x)
Coefficients:
(Intercept)            x
-4.20         0.94
"""
```
Call:
lm(formula = y ~ x)
abline(line, col="blue")
#' @title die object
#' @description a die
#' @param object - a vector that contains values on 6 sides
#' @param probability - a vector that contains probabilities of each sides being appeared.
#' @return table of sides and corresponding probabilities
#auxiliary function "check_prob" checks vaildity of the input "prob" for "die(sides, prob)"
check_prob <- function(prob) {
#stop if the vector length is invalid
if (length(prob) != 6 | !is.numeric(prob)) {
stop("\n'prob' must be a numeric vector of length 2")
}
#stop if the probabilities assigned are invalid
if (any(prob < 0) | any(prob > 1)) {
stop("\n'prob' values must be between 0 and 1")
}
if (sum(prob) != 1) {
stop("\nelements in 'prob' must add up to 1")  }
}
#auxiliary function "check_prob" checks vaildity of the input "sides" for "die(sides, prob)"
check_sides <- function(sides){
if (length(sides) != 6 | !is.character(sides)) {
stop("\n'sides' must be a character vector of length 6")}
}
#die function
die <- function(
sides = c("1", "2", "3", "4", "5", "6"),
prob = c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)){
##stop if number of sides and/or prob are not valid.
check_sides(sides)
check_prob(prob)
res <- list(
sides = sides,
prob = prob)
class(res) <- "die"
res
}
#print method for object of class "die"
print.die <- function(x) {
cat('object "die"\n\n')
side <- x$sides
prob <- x$prob
print(data.frame(side,prob))
invisible(x)
}
# die with non-standard sides
weird_die <- die(sides = c('i', 'ii', 'iii', 'iv', 'v', 'vi'))
weird_die
# create a loaded die
loaded_die <- die(prob = c(0.075, 0.1, 0.125, 0.15, 0.20, 0.35))
loaded_die
###bad sides
#bad_die <- die(sides = c('a', 'b', 'c', 'd', 'e'))
###removed to prevent error when knitting
###bad prob
#bad_die <- die(sides = c('a', 'b', 'c', 'd', 'e', 'f'), prob = c(0.2, 0.1, 0.1, 0.1, 0.5, 0.1))
###removed to prevent error when knitting
check_times <- function(times) {
#stop if times is not integer
if (times%%1 != 0) {
stop("\n'times' must be an integer")}
TRUE}
#create a fair die
fair_die <- die()
#roll function
roll <- function(die = fair_die, times = 1){
#stop conditions
if (class(die) != "die") {
stop("\nroll() requires an object 'die'")
}
check_times(times)
#roll
res <- list(
rolls = sample(die$sides, size = times, prob = die$prob, replace = TRUE),
sides = die$sides,
prob = die$prob,
total = length(sample(die$sides, size = times, prob = die$prob, replace = TRUE))
)
class(res) <- "roll"
res
}
#print method for object of function "roll"
print.roll <- function(x) {
cat('object "roll"\n\n')
rolls <- x$rolls
print(rolls)
invisible(x)
}
#50 rolls of a fair die
set.seed(123)
fair50 <- roll(fair_die, times = 50)
fair50
#fair_50rolls
set.seed(123)
fair_50rolls <- roll(fair_die, times = 50)
fair_50rolls
#what's in fair50?
names(fair50)
fair50$rolls
fair50$sides
fair50$prob
fair50$total
# string die
str_die <- die(sides = c('a', 'b', 'c', 'd', 'e', 'f'),
prob = c(0.075, 0.1, 0.125, 0.15, 0.20, 0.35))
# roll 20 times
set.seed(123)
str_rolls <- roll(str_die, times = 20)
names(str_rolls)
str_rolls
#Summary method
#summary.roll
#################################################################################
############NOTE: summary.roll should contain only "freq" and ##################
summary.roll <- function(x) {
side <- x$side
#create a counter vector
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a proportion vector
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total}
res <- list(
freqs <- data.frame(side, count, prop))
class(res) <- "summary.roll"
res
}
############ print.summary.roll should print "summary roll" ####################
print.summary.roll <- function(x, ...) {
cat('summary "roll"\n\n')
print(x$freqs)
invisible(x)
}
###############################################################################
###############################################################################
#fair50 summary
fair50_sum <- summary(fair_50rolls)
fair50_sum
class(fair50_sum)
names(fair50_sum)
fair50_sum$freqs
#Plots
plot.roll <- function(x, side = 1, ...) {
#create a vector "a" that contains counts
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a vector "b" that contains proportions
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total
}
names(prop) <- x$sides
barplot(prop, xlab = "sides of die",
ylab = "relative frequencies")
title(sprintf("Frequencies in a series of %s die rolls", x$total))
}
plot(fair_50rolls)
#Additional Methods
#example
# roll fair die
set.seed(123)
fair_die <- die()
fair500 <- roll(fair_die, times = 500)
# summary method
summary(fair500)
# extracting roll in position 500
"[.roll" <- function(x, i) {
x$rolls[i]}
# replacing last roll
"[<-.roll" <- function(x, i, value) {
#x is a "roll" object
if (value != x$sides[1] & value != x$sides[2] &
value != x$sides[3] & value != x$sides[4] &
value != x$sides[5] & value != x$sides[6]) {
stop(sprintf('\nreplacing value must be %s', x$sides))}
x$rolls[i] <- value
x}
fair500[500] <- 1
fair500[500]
summary(fair500)
# adding 100 rolls
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
res <- list(sides = obj$sides,
rolls = (c(obj$rolls, more_roll$rolls)),
prob = obj$prob,
total = obj$total + more_roll$total)
class(res) <- "roll"
res
}
fair600 <- fair500 + 100
summary(fair600)
# plot method
plot(fair500, 500)
#===========================================================
#						CART
#===========================================================
setwd("데이터 저장위치")
UKM <- read.csv("데이터이름.확장자명", header = T)
UKM <- data.frame(UKM)
head(UKM)
str(UKM)
# Train, Test data
sample.num  <- sample(1:nrow(UKM), 0.7*nrow(UKM))
train       <- UKM[sample.num,]
test        <- UKM[-sample.num,]
